openapi: 3.0.2
info:
  title: Addition API
  version: 1.0.0
  description: Addition API implemented with OpenAPI Codegen

tags:
  - name: "Addition"
paths:
  /add/{firstNumber}:
    get:
      summary: This is summary
      tags:
        - "Addition"
      description: Get the added value
      operationId: addTwoNumbers
      parameters:
        - name: firstNumber
          in: path
          description: "The first number to be added"
          required: true
          schema:
            type: integer
            default: 1
        - name: secondNumber
          in: query
          description: "The first number to be added"
          required: true
          schema:
            type: integer
            default: 1
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: integer
                properties:
                  message:
                    type: string
        400:
          $ref: '#/components/responses/InvalidDataResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'

  /v1/customers:
    get:
      summary: List Customers
      tags:
        - "Customers"
      description: get a list of customers in the system
      operationId: getCustomers
      parameters:
        - $ref: "#/components/parameters/PageNumberParam"
        - $ref: "#/components/parameters/PageSizeParam"
      responses:
        200:
          description: List of customers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerPagedList"
    post:
      summary: Add New Customer
      description: Create a new customer
      tags:
        - "Customers"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
      responses:
        201:
          description: "Customer Created"
          headers:
            Location:
              description: Location of the created customer
              schema:
                type: string
                format: uri
                example: "http://example.com/v1/customers/{assignedIdValue}"
        400:
          description: Bad Request

  /v1/customers/{id}:
    get:
      summary: Get Customer By ID
      tags:
        - "Customers"
      description: get a single **Customer** by its Id value
      operationId: getCustomerById
      parameters:
        - $ref: "#/components/parameters/CustomerIdPathParam"
      responses:
        200:
          description: customer info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
      security: []
    put:
      summary: Update Customer
      description: Update Customer by id
      operationId: updateCustomerById
      tags:
        - "Customers"
      parameters:
        - $ref: "#/components/parameters/CustomerIdPathParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
      responses:
        200:
          $ref: "#/components/responses/BaseResponse"
    delete:
      summary: Delete Customer
      description: Delete Customer by id
      operationId: deleteCustomerById
      tags:
        - "Customers"
      parameters:
        - $ref: "#/components/parameters/CustomerIdPathParam"
      responses:
        200:
          $ref: "#/components/responses/BaseResponse"

  /v1/customers/{customerId}/orders:
    post:
      tags:
        - Order Service
      description: Place Order
      operationId: placeBeerOrder
      parameters:
        - name: customerId
          in: path
          description: Customer Id
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BeerOrder'
        required: false
      responses:
        201:
          description: Order Created
          headers:
            Location:
              description: Reference to created Order
              style: simple
              explode: false
              schema:
                type: string
                format: uri
        400:
          description: Bad Reqeust
        404:
          description: Not Found
        409:
          description: Conflict
      callbacks:
        orderStatusChange:
          '${request.body#/orderStatusCallbackUrl}':
            description: Webhook for order status change notifications
            post:
              requestBody:
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        orderId:
                          type: string
                          format: uuid
                        orderStatus:
                          type: string
              responses:
                200:
                  description: Okay

  /v1/beers:
    get:
      summary: List Beers
      tags:
        - "Beer"
      description: list all beers in system
      operationId: listBeers
      parameters:
        - $ref: "#/components/parameters/PageNumberParam"
        - $ref: "#/components/parameters/PageSizeParam"
      responses:
        200:
          description: List of Beers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BearPagedList'
        404:
          description: No Beers Found

security:
  - BasicAuth: []
  - JwtAuthToken: []

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    JwtAuthToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Greeting:
      type: object
      properties:
        message:
          type: string
          example: 'Hello from Spring'
          default: 'Hello visitor'
    Address:
      type: object
      properties:
        line1:
          type: string
          example: 123 main
        city:
          type: string
          example: Hanoi
        stateCode:
          type: string
          minLength: 2
          maxLength: 2
          description: 2 Letter State Code
          enum:
            - AL
            - AK
            - AZ
            - AR
            - CA
        zipCode:
          type: string
          example: 33113
    Customer:
      type: object
      description: customer object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        firstName:
          type: string
          minLength: 2
          maxLength: 100
          example: John
        lastName:
          type: string
          minLength: 2
          maxLength: 100
          example: Thompson
        address:
          $ref: "#/components/schemas/Address"
    CustomerList:
      type: array
      minItems: 1
      maxItems: 100
      description: List of customers
      items:
        $ref: "#/components/schemas/Customer"
    CustomerPagedList:
      type: object
      allOf:
        - $ref: "#/components/schemas/PagedResponse"
      properties:
        content:
          $ref: "#/components/schemas/CustomerList"
    Brewery:
      type: object
      properties:
        name:
          type: string
        location:
          type: string
    Beer:
      type: object
      properties:
        beerName:
          type: string
        style:
          type: string
          enum:
            - ALE
            - PALE_ALE
            - IPA
            - WHEAT
            - LAGER
        price:
          type: number
          format: float
        quantityOnHand:
          type: integer
          format: int32
        brewery:
          $ref: '#/components/schemas/Brewery'
      description: Beer Object
    BeerList:
      type: array
      items:
        $ref: '#/components/schemas/Beer'
    BearPagedList:
      type: object
      allOf:
        - $ref: "#/components/schemas/PagedResponse"
      properties:
        content:
          $ref: "#/components/schemas/BeerList"
    BeerOrder:
      required:
        - customerId
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
          readOnly: true
        customerId:
          type: string
          format: uuid
        customerRef:
          type: string
          nullable: true
        beerOrderLines:
          type: array
          items:
            $ref: '#/components/schemas/BeerOrderLine'
        orderStatusCallbackUrl:
          type: string
          format: uri
    BeerOrderLine:
      required:
        - orderQuantity
        - upc
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
          readOnly: true
        beerId:
          type: string
          format: uuid
          readOnly: true
        upc:
          type: string
        orderQuantity:
          maximum: 999
          minimum: 1
          type: integer
        quantityAllocated:
          type: integer
          nullable: true
          readOnly: true
    PagedResponse:
      type: object
      properties:
        pageable:
          $ref: '#/components/schemas/PagedResponse_pageable'
        totalPages:
          type: integer
          format: int32
        last:
          type: boolean
        totalElements:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        number:
          type: integer
          format: int32
        numberOfElements:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/PagedResponse_pageable_sort'
        first:
          type: boolean
    PagedResponse_pageable_sort:
      type: object
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean
    PagedResponse_pageable:
      type: object
      properties:
        sort:
          $ref: '#/components/schemas/PagedResponse_pageable_sort'
        offset:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean


  responses:
    BaseResponse:
      description: Base Response
      content:
        application/json:
          schema:
            title: BaseResponse
            type: object
            properties:
              message:
                type: string
              success:
                type: boolean
    InvalidDataResponse:
      description: Invalid request
      content:
        application/json:
          schema:
            title: InvalidDataResponse
            type: object
            properties:
              message:
                type: string
              code:
                type: string

    NotFoundResponse:
      description: Route not found
      content:
        application/json:
          schema:
            title: NotFoundResponse
            type: object
            properties:
              error:
                type: string
                example: "Route not Found"

  parameters:
    PageNumberParam:
      name: pageNumber
      in: query
      description: Page Number
      required: false
      style: form
      schema:
        type: integer
        format: int32
        default: 1
    PageSizeParam:
      name: pageSize
      in: query
      description: Page Size
      required: false
      style: form
      schema:
        type: integer
        format: int32
        default: 10
    CustomerIdPathParam:
      name: id
      in: path
      description: "The customer id"
      required: true
      schema:
        type: integer